'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _ = _interopDefault(require('lodash'));

//
var script = {
  name: 'cmui-list-item',
  // mixins:[baseMixin],
  inject: ['bus'],
  props: {
    title: {
      type: String,
      default: '',
      intro: '标题文本'
    },
    bgcolor: {
      type: String,
      default: '',
      intro: '背景色'
    },
    border: {
      type: Boolean,
      default: true,
      intro: '是否显示边框'
    }
  },
  data: function data() {
    return {
      position: {},
      index: 0
    };
  },
  computed: {
    itemContainerStyle: function itemContainerStyle() {
      var boxShadow;
      var parent = this.bus.parent;

      if (this.border && parent.border && parent.realSpace !== 0) {
        boxShadow = '0px 0px 0px 1px ' + parent.borderColor;
      }

      return {
        boxShadow: boxShadow
      };
    }
  },
  created: function created() {
    this.index = this.bus.children.push(this) - 1;
  },
  destroyed: function destroyed() {
    _.remove(this.bus.children, this);
  },
  methods: {
    itemStyle: function itemStyle() {
      var width;
      var col = this.bus.parent.realCol;
      var colCount = (_.isArray(col) ? col.length : col) || 1;
      var clear = this.index % colCount === 0 ? 'left' : undefined;
      var padding = this.bus.parent.realSpace;
      var boxShadow = this.bus.parent.boxShadow;
      var backgroundColor = this.bgcolor;

      if (_.isNumber(col) && col !== 1) {
        width = 100 / col + '%';
      } else if (_.isArray(col)) {
        var total = col.reduce(function (pre, next) {
          return pre + next;
        });
        width = 100 * col[this.index % col.length] / total + '%';
      }

      return {
        width: width,
        clear: clear,
        padding: padding,
        boxShadow: boxShadow,
        backgroundColor: backgroundColor
      };
    }
  }
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".cmui-list-item{float:left;position:relative;min-height:1px;width:100%}.cmui-list-item-title{position:-webkit-sticky;position:sticky;top:0;z-index:20}";
styleInject(css_248z);

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
const __vue_script__ = script;
/* template */
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    { ref: "listItem", staticClass: "cmui-list-item", style: _vm.itemStyle() },
    [
      _vm.$slots.title || _vm.title
        ? _c(
            "div",
            { staticClass: "cmui-list-item-title" },
            [
              _vm._t("title"),
              _vm._v(" "),
              !_vm.$slots.title
                ? [_vm._v("\n" + _vm._s(_vm.title) + "\n")]
                : _vm._e()
            ],
            2
          )
        : _vm._e(),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "cmui-list-item-container",
          style: _vm.itemContainerStyle
        },
        [_vm._t("default")],
        2
      )
    ]
  )
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__ = /*#__PURE__*/normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    undefined,
    undefined,
    undefined
  );

__vue_component__.install = function (Vue, Maple) {
  Vue.component(__vue_component__.name, __vue_component__);
};

module.exports = __vue_component__;
